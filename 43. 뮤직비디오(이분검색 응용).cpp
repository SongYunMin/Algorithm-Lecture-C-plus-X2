///*
//n = 9 m = 3 일때
//1. 곡 수 + 1를 더해본다 DVD 한개 최소 용량은 이 안에 있음
//2. 이분검색 시작, 46을 2로 나누어 봄
//3. 23이 3개 이하로 (m=3) 녹화가 가능한지 확인해 봄
//4. 곡을 하나씩 23이 넘어가기 전까지 더해본다.
//5. 그럼 1(1,2,3,4,5), 2(7,8), 3(9)가 나와서 정답으로 할 수 있다
//6. 하지만 "최소 용량" 을 찾아야 한다
//7. 다시 1 + (23-1) 을 더해본다. (right = mid - 1)
//8. 그리고 2로 나누고 11이 답으로 가능한지 찾아본다.
//9. 1(1,2,3,4) 2(5, 6) 3(7), 4(8), 5(9)가 나와서 정답으로 할 수 없다 (m = 3)
//10. left가 mid + 1이 된다.
//11. (11 + 1) + 22 를 더한후 2로 나눈다 = 17
//12. 17이 답으로 가능한지 확인 해 본다.
//13. 1(1,2,3,4,5) 2(6,7) 3(8,9)가 나와서 정답으로 할 수 있다.
//14. 정답을 23에서 17로 교체한다.
//15. 이 과정을 이분검색이 끝날 때 까지 반복한다.
//(이분 검색은 lt가 rt를 넘어가면 끝난다.)
//
//-- 반례 있음 --
//m을 n과 똑같이 잡으면 1이 나옴 최대값의 크기가 나와야 함
//
//*/
//
//#include <iostream>
//#include <algorithm> 
//int a[1001], n;
//
//int Count(int size)
//{
//	int i, cnt = 1, sum = 0;
//	for (i = 1; i <= n; i++) {
//		// DVD 한개 용량
//		if (sum + a[i] > size) {		// DVD 하나 용량을 넘어가면
//			cnt++;						// DVD 추가
//			sum = a[i];
//		}
//		else {
//			sum = sum + a[i];
//		}
//	}
//	return cnt;
//}
//
//int main(void)
//{
//	int m, i, lt = 1, rt = 0, mid, res=0 , max = -2147000000;
//
//	std::cin >> n >> m;
//
//	for (i = 1; i <= n; i++) {
//		std::cin >> a[i];
//		rt += a[i];			// 뮤직비디오의 총 시간을 저장
//		if (a[i] > max) max = a[i];	// 노래 중 가장 큰 값을 찾음
//	}
//
//	// 이분 검색
//	while (lt <= rt) {				// 왼쪽이 오른쪽을 넘어가지 않게
//		mid = (lt + rt) / 2;		// 중간 값을 정하고
//		// 답으로 가능할 경우
//		if (mid >= max && Count(mid) <= m) {		// mid값이 m보다 작을때
//			res = mid;				// 답 저장
//			rt = mid - 1;			// 오른쪽 다시 세팅
//
//		}
//		// 답이 가능하지 않을 경우
//		else {
//			lt = mid + 1;			// 왼쪽 다시 세팅
//		}
//	}
//
//	std::cout << res << std::endl;
//
//	return 0;
//}